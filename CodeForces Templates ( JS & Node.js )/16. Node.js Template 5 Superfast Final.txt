
/* -------------------------------------------------------- */
/*   ( The Authentic JS CodeBuff )
 ___ _                      _              _ 
 | _ ) |_  __ _ _ _ __ _ __| |_ __ ____ _ (_)
 | _ \ ' \/ _` | '_/ _` / _` \ V  V / _` || |
 |___/_||_\__,_|_| \__,_\__,_|\_/\_/\__,_|/ |
                                        |__/ 
 */
/* ---------------------------------------------------------   */
/*    Youtube: https://youtube.com/@code-with-Bharadwaj        */
/*    Github :  https://github.com/Manu577228                  */
/* ----------------------------------------------------------- */

let inputBuffer = Buffer.allocUnsafe(1e7);
let inputIndex = 0, inputLength = 0;
let outputBuffer = Buffer.allocUnsafe(1e7);
let outputIndex = 0;

const fs = require('fs');

inputLength = fs.readSync(process.stdin.fd, inputBuffer, 0, inputBuffer.length, null);

function readInt() {
    let num = 0, sign = 1;
    while (inputBuffer[inputIndex] < 48 || inputBuffer[inputIndex] > 57) {
        if (inputBuffer[inputIndex] === 45) sign = -1;
        inputIndex++;
    }
    while (inputIndex < inputLength && inputBuffer[inputIndex] >= 48 && inputBuffer[inputIndex] <= 57) {
        num = num * 10 + (inputBuffer[inputIndex++] - 48);
    }
    return num * sign;
}

function writeInt(value) {
    if (outputIndex > 0) {
        outputBuffer[outputIndex++] = 32;
    }
    if (value < 0) {
        outputBuffer[outputIndex++] = 45;
        value = -value;
    }
    let digits = [];
    do {
        digits.push(value % 10);
        value = Math.floor(value / 10);
    } while (value > 0);
    for (let i = digits.length - 1; i >= 0; i--) {
        outputBuffer[outputIndex++] = 48 + digits[i];
    }
}

const v8Flags = [
    '--turbo-inline-threshold=500',    // Increase inlining threshold
    '--max-old-space-size=256',        // Reduce old space size (balance with performance)
    '--no-lazy',                       // Disable lazy compilation
    '--optimize-for-size',             // Prioritize code size over speed 
    '--unbox-small-integers',          // Optimize small integer storage
    '--predictable',                   // Improve predictability (use cautiously)
    '--no-use-idle-notification',       // Potentially reduce GC pauses
    '--single-generation',             // Use a single generational GC (experimental, potential memory benefit)
    '--compact-maps',                  // Compact Map objects (experimental, potential memory benefit)
    '--always-compact'                 // Force compaction during GC (can impact performance, use cautiously)
];

if (v8Flags.length > 0) {
    process.execArgv.push('--v8-options=' + v8Flags.join(' '));
}

let a = readInt();
let b = readInt();
writeInt(a + b);

fs.writeSync(process.stdout.fd, outputBuffer.slice(0, outputIndex));
